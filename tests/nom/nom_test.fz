# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test nom
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# test for nom, a parser combinator framework
#
nom_test : nom, nom.combinator, nom.string_parsers, nom.sequence, nom.branch, nom.multi =>


  simple_parser_test is
    say ((to_string_parser whitespace0).parse "\n \tHello").asString.codepointLength


  hex_parser_test is
    hex_color(r,g,b u8) is
      redef asString string is
        "r: $r, g: $g, b: $b"

    is_valid(c codepoint) bool is
      codepoints.ascii_digit.contains c.val
        || (u32 0x41 .. 0x46).contains c.val

    # example: `A1` => u8
    parser_two_digit_hex := (take_while_m_n 2 2 (fun is_valid)).map u8 (o1 -> (strings.fromCodepoints o1).parse_u32(16).val.as_u8)
    # example: `#9F3A10` => tuple u8 u8 u8
    parser_hex_tuple := preceded (tag "#") (tuple3 parser_two_digit_hex parser_two_digit_hex parser_two_digit_hex)
    # example: `#9F3A10` => hex_color
    parser_hex_color_seq_codepoints := parser_hex_tuple.map hex_color (t -> (r,g,b) := t; hex_color r g b)
    # convert parser to take string not codepoints as input
    # NYI: using this crashes in c backend currently
    parser_hex_color := to_string_input parser_hex_color_seq_codepoints

    say (parser_hex_color_seq_codepoints.parse "#9F3A10".asCodepoints).asString   # NYI: asCodepoints, asString necessary, see issue #486
    say (parser_hex_color_seq_codepoints.parse "#9F3A1G".asCodepoints).asString   # NYI: asCodepoints, asString necessary, see issue #486
    say (parser_hex_color_seq_codepoints.parse "Hello".asCodepoints).asString     # NYI: asCodepoints, asString necessary, see issue #486
    say (parser_hex_color_seq_codepoints.parse "".asCodepoints).asString          # NYI: asCodepoints, asString necessary, see issue #486


  json_parser_test is
    say (parsers.json.parse "\{  \"employee \":  \{  \"name \":  \"sonoo\",  \"salary \": 56000,  \"married \": true } }").asString

  simple_parser_test
  hex_parser_test
  json_parser_test

