# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test nom
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# test for nom, a parser combinator framework
#
nom_test =>


  simple_parser_test is
    sp := nom.string_parsers

    say ((sp.to_string_parser sp.whitespace0).parse "\n \tHello").as_string.codepoint_length


  hex_parser_test is
    sp :=  nom.string_parsers
    cp :=  nom.combinator
    seq := nom.sequence

    hex_color(r,g,b u8) is
      redef as_string String is
        "r: $r, g: $g, b: $b"

    is_valid(c codepoint) bool is
      codepoint.type.ascii_digit.contains c.val
        || (u32 0x41 .. 0x46).contains c.val

    # example: `A1` => u8
    parser_two_digit_hex := (seq.take_while_m_n codepoint 2 2 (fun is_valid)).map u8 (o1 -> (String.type.from_codepoint_sequence o1).parse_u32(16).val.as_u8)
    # example: `#9F3A10` => tuple u8 u8 u8
    parser_hex_tuple := cp.preceded (sp.tag "#") (cp.tuple3 parser_two_digit_hex parser_two_digit_hex parser_two_digit_hex)
    # example: `#9F3A10` => hex_color
    parser_hex_color_seq_codepoints := parser_hex_tuple.map hex_color (t -> (r,g,b) := t; hex_color r g b)
    # convert parser to take string not codepoints as input
    # NYI: using this crashes in c backend currently
    parser_hex_color := sp.to_string_input parser_hex_color_seq_codepoints

    say (parser_hex_color_seq_codepoints.parse "#9F3A10".as_codepoint_sequence)
    say (parser_hex_color_seq_codepoints.parse "#9F3A1G".as_codepoint_sequence)
    say (parser_hex_color_seq_codepoints.parse "Hello".as_codepoint_sequence)
    say (parser_hex_color_seq_codepoints.parse "".as_codepoint_sequence)


  json_parser_test is
    say (nom.parsers.json.parse "")
    say (nom.parsers.json.parse " ")
    say (nom.parsers.json.parse "\{}")
    say (nom.parsers.json.parse " 42 ")
    say (nom.parsers.json.parse " null ")
    say (nom.parsers.json.parse " true ")
    say (nom.parsers.json.parse " false ")
    say (nom.parsers.json.parse "[1, 2, 3]")
    # say (nom.parsers.json.parse "[1.1,2.2,3.3]")
    say (nom.parsers.json.parse "\"hello\\nworld\"")
    say (nom.parsers.json.parse "\{ \"name \":  \"sonoo\" }")
    say (nom.parsers.json.parse "\{ \"name \":  [ 1, true, false, null, \"sonoo\", \{ \"name \":  \"sonoo\" } ] }")
    say (nom.parsers.json.parse "\{  \"employee \":  \{  \"name \":  \"sonoo\",  \"salary \": 56000,  \"married \": true } }")

  simple_parser_test
  hex_parser_test
  json_parser_test

