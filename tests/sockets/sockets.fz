# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test sockets
#
# -----------------------------------------------------------------------

sockets =>

  n := fuzion.sys.net

  localhost array u8 := [127, 0, 0, 1]
  port u16 := 9000

  # should result in connection refused
  # since no server is running yet...
  n.client localhost port
  say n.connection.last_error

  # reading/writing from/to closed connection
  say (n.connection.read 10)
  say (n.connection.write "Writing on closed connection".utf8)

  say


  # start server in background
  concur.thread.spawn ()->

    # server is installed in env
    n.server n.ipv4 port

    say "server: is_active {n.server.is_active}"
    say

    for _ := n.server.accept, n.server.accept
    while n.server.is_active
    do
      if n.connection.is_active
        b := n.connection.read 10
        say "server, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

        b := n.connection.read 50
        say "server, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

        n.connection.write "I am a response payload".utf8


  # wait for server to start
  time.nano.sleep (time.durations.seconds 1)


  # write request to server and read response
  for i in 1..2 do
    n.client localhost port

    if n.connection.is_active
      n.connection.write "I am a request payload".utf8

      b := n.connection.read 10
      say "client, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

      b := n.connection.read 50
      say "client, received msg: {b.bind String (d -> String.type.from_bytes  d)}"
    else
      say n.connection.last_error
    say
