# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test sockets
#
# -----------------------------------------------------------------------

sockets_test_client is

  client(family net.family.val, protocol net.protocol.val, host String, port u16, num i32) is
    match net.client sockets_test_client family protocol host port
      err error =>
        say "$protocol/$family-client $num, $host:$port: error establishing connection"
      unit unit =>

        req := ("GET / HTTP\n"
          + "Host: $host\n"
          + "Client: $num\n")

        say ("$protocol/$family-client $num, write to $host:$port: {((net.channel sockets_test_client).write req.utf8).or(error "error")}")

        match protocol
          net.protocol.tcp =>
            # for UDP this read would block indefinitely
            rr := (net.channel sockets_test_client)
              .read 12
              .or(error "error")
              .bind String (d -> String.type.from_bytes  d)
            say ("$protocol/$family-client $num, read  12 bytes from  $host:$port: >{rr}<")

            # read more than available
            rr := (net.channel sockets_test_client)
              .read 100
              .or(error "error")
              .bind String (d -> String.type.from_bytes  d)
            say ("$protocol/$family-client $num, read 100 bytes from  $host:$port: >{rr}<")
          net.protocol.udp =>
            # rest of udp datagram was discarded
          * =>  panic "NI"



########### Tests ################

  families array net.family.val := [net.family.ipv4, net.family.ipv6]
  protocols array net.protocol.val := [net.protocol.tcp, net.protocol.udp]
  for p in protocols do
    for f in families do
      say "### $p/$f-Tests ###"

      # For now use a different port for every test.
      port := u16 40000 + p.as_num.as_u16*10 + f.as_num.as_u16

      # write request to server and read response
      for i in 1..2 do
        client f p (net.family.localhost f) port i
