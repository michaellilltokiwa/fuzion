# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test sockets
#
# -----------------------------------------------------------------------

sockets_test is

  localhost_ipv4 String := "127.0.0.1"
  localhost_ipv6 String := "::1"


  # server handles one connection at a time
  start_server_in_background(family net.family.family_choice, protocol net.protocol.protocol_choice, port u16) =>
    # start server in background
    concur.thread.spawn ()->

      # install server in env
      say "opened $protocol/$family-server on port $port: {(net.server family protocol port).or(error "error")}"

      while net.server.is_active
      do
        net.server.accept
        if (net.connection net.server).is_active
          b := (net.connection net.server).read 10
          say "$protocol/$family-server, read  10 bytes: {b.or(error "error").bind String (d -> String.type.from_bytes  d)}"

          match protocol
            net.protocol.tcp =>
              # read more than available
              b := (net.connection net.server).read 100
              say "$protocol/$family-server, read 100 bytes: {b.or(error "error").bind String (d -> String.type.from_bytes  d)}"

              (net.connection net.server).write "I am a response payload".utf8
            net.protocol.udp =>
              # rest of udp datagram was discarded
            * =>
              panic "NI"


    # wait for server to start
    time.nano.sleep (time.durations.ms 500)

    say "server: is_active {net.server.is_active}"


    # try start another server on same port in background
    concur.thread.spawn ()->

      # server is installed in env
      say "opened $protocol/$family-server on port $port: {(net.server family protocol port).or(error "error")}"

      unit

    # wait for server to start
    time.nano.sleep (time.durations.ms 500)


  client(family net.family.family_choice, protocol net.protocol.protocol_choice, host String, port u16, print bool) =>
    conn := net.client sockets_test family protocol host port

    conn.write "I am a request payload".utf8

    match protocol
      net.protocol.tcp =>
        b := conn.read 10
        say "$protocol/$family-client, read  10 bytes from  $host:$port: {b.or(error "error").bind String (d -> String.type.from_bytes  d)}"

        # read more than available
        b := conn.read 100
        say "$protocol/$family-client, read 100 bytes from  $host:$port: {b.or(error "error").bind String (d -> String.type.from_bytes  d)}"

      net.protocol.udp =>
        # rest of udp datagram was discarded
      * =>  panic "NI"



########### Tests ################

  families array net.family.family_choice := [net.family.ipv4, net.family.ipv6]
  protocols array net.protocol.protocol_choice := [net.protocol.tcp, net.protocol.udp]
  for p in protocols do
    for f in families do
      say "### $p/$f-Tests ###"

      # NYI we don't have proper means yet to communicate
      # with other threads. So we can't shut down the server
      # after a test. For now use a different port for every test.
      port := u16 40000 + p.as_num.as_u16*10 + f.as_num.as_u16

      # should result in refused connection
      # since no server is running yet
      client f p localhost_ipv4 port true


      start_server_in_background f p port

      # write request to server and read response
      for _ in 1..2 do
        client f p localhost_ipv4 port true

      # wait for server to receive udp packages
      time.nano.sleep (time.durations.ms 500)
