# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test sockets
#
# -----------------------------------------------------------------------

sockets_test is

  localhost_ipv4 String := "127.0.0.1"
  localhost_ipv6 String := "::1"


  # server handles one connection at a time
  start_server_in_background(family net.family.family_choice, port u16) =>
    # start server in background
    concur.thread.spawn ()->

      # install server in env
      say (net.server family port)

      while net.server.is_active
      do
        net.server.accept
        if (net.connection net.server).is_active
          b := (net.connection net.server).read 10
          say "server, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

          # read more than available
          b := (net.connection net.server).read 100
          say "server, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

          (net.connection net.server).write "I am a response payload".utf8


    # wait for server to start
    time.nano.sleep (time.durations.ms 500)

    say "server: is_active {net.server.is_active}"


    # try start another server on same port in background
    concur.thread.spawn ()->

      # server is installed in env
      say (net.server family port)

      unit

    # wait for server to start
    time.nano.sleep (time.durations.ms 500)


  client(host String, port u16, print bool) =>
    conn := net.client sockets_test net.family.ipv4 host port

    conn.write "I am a request payload".utf8

    b := conn.read 10
    say "client, received msg: {b.bind String (d -> String.type.from_bytes  d)}"

    # read more than available
    b := conn.read 100
    say "client, received msg: {b.bind String (d -> String.type.from_bytes  d)}"


########### Tests ################

  # should result in refused connection
  # since no server is running yet
  client localhost_ipv4 9000 true

  start_server_in_background net.family.ipv4 9000

  # write request to server and read response
  for _ in 1..2 do
    client localhost_ipv4 9000 true



  # concurrent requests

  # start another server
  start_server_in_background net.family.ipv4 9001

  # write request to server and read response
  for i in 1..10 do
    concur.thread.spawn ()->
      client localhost_ipv4 9001 false

  # wait for clients to read/write
  time.nano.sleep (time.durations.ms 500)
