# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test
#
# -----------------------------------------------------------------------

basicIntegers_negative is

  assignConstants =>

    i1 i8 := 0
    i2 i8 := 127
    i3 i8 := 128     // 1. should flag an error, constant out of range
    i4 i8 := -1
    i5 i8 := -127
    i6 i8 := -128
    i7 i8 := -129    // 2. should flag an error, constant out of range
    i8a i8 := - -1   // 3. should flag an error, constant out of range
    i8b i8 := - - 1  // 4. should flag an error, constant out of range

    u1 u8 := 0
    u2 u8 := 127
    u3 u8 := 128
    u4 u8 := 255
    u5 u8 := 256     // 5. should flag an error, constant out of range
    u6 u8 := -0
    u7 u8 := -1      // 6. should flag an error, constant out of range
    u8a u8 := - -1   // 7. should flag an error, constant out of range
    u8b u8 := - - 1  // 8. should flag an error, constant out of range

    s1 i16 := 0
    s2 i16 := 127
    s3 i16 := 128
    s4 i16 := 0x7fff
    s5 i16 := 0x8000               // 9. should flag an error, constant out of range
    s6 i16 := 0b111111111111111
    s7 i16 := 0b1111111111111111   // 10. should flag an error, constant out of range
    s8 i16 := -0
    s9 i16 := -32768
    s9a i16 := -(32768)            // 11. should flag an error, constant out of range
    s9b i16 := -(-32768)           // 12. should flag an error, constant out of range
    s9c i16 := -(-(-32768))        // 13. should flag an error, constant out of range
    s10 i16 := -32769              // 14. should flag an error, constant out of range
    s10a i16 := -(-(-(32769)))     // 15. should flag an error, constant out of range
    s10b i16 := +(-(+(32769)))     // 16. should flag an error, constant out of range

    c1 u16 := 0
    c2 u16 := 65535
    c3 u16 := 65536                // 17. should flag an error, constant out of range
    c4 u16 := 0xffff
    c5 u16 := 0x10000              // 18. should flag an error, constant out of range
    c6 u16 := 0b1111111111111111
    c7 u16 := 0b10000000000000000  // 19. should flag an error, constant out of range
    c8 u16 := -0
    c9 u16 := -1                   // 20. should flag an error, constant out of range
    c10 u16 := - - 1               // 21. should flag an error, constant out of range

    l1 i64 := 9223372036854775807
    l2 i64 := 9223372036854775808  // 22. should flag an error, constant out of range

    ul1 u64 := 9223372036854775807
    ul2 u64 := 9223372036854775808
    ul3 u64 := 18446744073709551615
    ul4 u64 := 18446744073709551616 // 23. should flag an error, constant out of range
    ul5 u64 := - 0                  // 24. should flag an error, constant out of range
    ul6 u64 := -1                   // 25. should flag an error, constant out of range
    ul7 u64 := - -1                 // 26. should flag an error, constant out of range

  assignToConstructur =>

    i1 := i8 0
    i2 := i8 127
    i3 := i8 128       // 27. should flag an error, constant out of range
    i4 := i8 -1
    i5 := i8 -127
    i6 := i8 -128
    i7 := i8 -129      // 28. should flag an error, constant out of range
    i8a := i8 (- -1)   // 29. should flag an error, constant out of range
    i8b := i8 (- - 1)  // 30. should flag an error, constant out of range

    u1 := u8 0
    u2 := u8 127
    u3 := u8 128
    u4 := u8 255
    u5 := u8 256       // 31. should flag an error, constant out of range
    u6 := u8 -0
    u7 := u8 -1        // 32. should flag an error, constant out of range
    u8a := u8 (- -1)   // 33. should flag an error, constant out of range
    u8b := u8 (- - 1)  // 34. should flag an error, constant out of range

    s1 := i16 0
    s2 := i16 127
    s3 := i16 128
    s4 := i16 0x7fff
    s5 := i16 0x8000               // 35. should flag an error, constant out of range
    s6 := i16 0b111111111111111
    s7 := i16 0b1111111111111111   // 36. should flag an error, constant out of range
    s8 := i16 -0
    s9 := i16 -32768
    s9a := i16 -(32768)            // 37. should flag an error, constant out of range
    s9b := i16 -(-32768)           // 38. should flag an error, constant out of range
    s9c := i16 -(-(-32768))        // 39. should flag an error, constant out of range
    s10 := i16 -32769              // 40. should flag an error, constant out of range
    s10a := i16 -(-(-(32769)))     // 41. should flag an error, constant out of range
    s10b := i16 +(-(+(32769)))     // 42. should flag an error, constant out of range

    c1 := u16 0
    c2 := u16 65535
    c3 := u16 65536                // 43. should flag an error, constant out of range
    c4 := u16 0xffff
    c5 := u16 0x10000              // 44. should flag an error, constant out of range
    c6 := u16 0b1111111111111111
    c7 := u16 0b10000000000000000  // 45. should flag an error, constant out of range
    c8 := u16 -0
    c9 := u16 -1                   // 46. should flag an error, constant out of range
    c10 := u16 (- - 1)             // 47. should flag an error, constant out of range

    l1 := i64 9223372036854775807
    l2 := i64 9223372036854775808  // 48. should flag an error, constant out of range

    ul1 := u64 9223372036854775807
    ul2 := u64 9223372036854775808
    ul3 := u64 18446744073709551615
    ul4 := u64 18446744073709551616 // 49. should flag an error, constant out of range
    ul5 := u64 (- 0)                // 50. should flag an error, constant out of range
    ul6 := u64 -1                   // 51. should flag an error, constant out of range
    ul7 := u64 (- -1)               // 52. should flag an error, constant out of range

  sa (x i32) =>
    say x

  sa 123456        # ok
  sa 123.456       # 53. should flag an error, must be integer
  sa 123456.789    # 54. should flag an error, must be integer
  sa 123456.000    # ok
  sa 123456.789E2  # 55. should flag an error, must be integer
  sa 123456.789E3  # ok
  sa 123456.789E4  # ok
  sa 123456780E-1  # ok
  sa 123456780E-2  # 56. should flag an error, must be integer
  sa 123456780E-3  # 57. should flag an error, must be integer
