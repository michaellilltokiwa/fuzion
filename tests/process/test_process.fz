test_process =>

  spawned => process.spawned.env

  # create string of given byte size
  get_str(byte_size i32) =>
    ref : String
      utf8 Sequence u8 is
        (1..byte_size)
          .map u8 (x -> codepoint.type.zero_char)

  test(str String) is
    say "===  Test: $str  ==="



  test "write to stdin of process"
  say (process.spawn ["cat"] ()->
      spawned.write_string "Hello from the other side."
      say "close write: {spawned.close_write}"
      say "close write again: {spawned.close_write}"
      spawned.read_string
  )



  test "read stdout of process"
  say (process.spawn ["echo", "eecchhoo"] ()->
    spawned.read_string
  )



  test "pass environment variable"
  # NYI why do we have to specify type param?
  say (process.spawn (outcome String) ["printenv", "MYENVVAR"] (container.map_of [("MYENVVAR", "content")]) ()->
    spawned.read_string
  )



  test "feed output of process 1 to process 2"
  say (process.spawn ["echo", "'feed me to cat'"] ()->
    spawned.pipe_to ["cat"] ()->spawned.read_string
  )



  test "1kb argument, piped to another process"
  say (process.spawn ["echo", "-n", (get_str 1E3)] ()->
    spawned.pipe_to ["cat"] ()->
      say spawned.read_string.val.byte_length
      say "exit code: {spawned.exit_code}"
      # execute exit_code twice:
      say "exit code: {spawned.exit_code}"
  )



  /* NYI Needs too much heap in c-backend without GC currently.


  test "100kb argument, piped to another process"
  say (process.spawn ["echo", "-n", (get_str 1E5)] ()->
    spawned.pipe_to ["cat"] ()->
      say spawned.read_string.val.byte_length
      say "exit code: {spawned.exit_code}"
      # execute exit_code twice:
      say "exit code: {spawned.exit_code}"
  )


  test "10mb write to stdin, piped to another process"
  say (process.spawn ["cat"] ()->
    p := spawned
    concur.thread.spawn ()->
      time.nano.sleep (time.durations.s 1)
      say "start reading"
      while
        match p.read_bytes 100
          Sequence => true
          * => false

    # NYI write should block here?
    say (spawned.write_bytes (get_str 1E7).utf8)
    spawned.close_write
    say "exit code: {spawned.exit_code}"
  )
  */


