
$MODULE/io/buffered/reader.fz:203:5: warning 1: Loop instance escapes.
    while
----^^^^^
      match (reader LM).read
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        io.end_of_file =>
^^^^^^^^^^^^^^^^^^^^^^^^^
          false
^^^^^^^^^^^^^^^
        a array =>
^^^^^^^^^^^^^^^^^^
          # trailing carriage returns are dropped
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          add_to_res(a0 Sequence u8) unit =>
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            if !a0.is_empty
^^^^^^^^^^^^^^^^^^^^^^^^^^^
              a1 := if strip_cr && a0.last = encodings.ascii.cr
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        (a0.slice 0 a0.count-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                      else
^^^^^^^^^^^^^^^^^^^^^^^^^^
                        a0
^^^^^^^^^^^^^^^^^^^^^^^^^^
              for b in a1 do
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                res.add b
^^^^^^^^^^^^^^^^^^^^^^^^^
          match (container.searchable_sequence a).index_of delim
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            idx i32 =>
^^^^^^^^^^^^^^^^^^^^^^
              add_to_res (a.slice 0 idx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              (reader LM).discard idx+1
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              false
^^^^^^^^^^^^^^^^^^^
            nil =>
^^^^^^^^^^^^^^^^^^
              add_to_res a
^^^^^^^^^^^^^^^^^^^^^^^^^^
              (reader LM).discard_all
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              true
^^^^^^^^^^^^^^^^^^
^
Call that triggers the escape: 
$MODULE/io/buffered/reader.fz:221:26:
              add_to_res (a.slice 0 idx)
-------------------------^^^^^^^^^^^^^^^
The found escape route: 
$MODULE/io/buffered/reader.fz:221:26:
              add_to_res (a.slice 0 idx)
-------------------------^^^^^^^^^^^^^^^$MODULE/array.fz:150:16:
  public redef slice(from, to i32) Sequence T
---------------^^^^^
To solve this, either change the code where loop instance escapes or wrap loop in effect loop_allow_escape.


--CURDIR--/reg_issue2280.fz:32:5: warning 2: Loop instance escapes.
    for
----^^^
      t := u32 0, s
^^^^^^^^^^^^^^^^^^^
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      l := io.buffered.read_line lm ? str String => str | io.end_of_file => ""
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: read_line should return a choice of String | end_of_file or similar
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      l2 := l.as_codepoints
^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .as_list       # NYI: would be good not to need this
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .map (.val)    # NYI: would be good not to need this
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .filter codepoint_type_ascii_digit.contains    # using brand new partial application!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      first := l2.head.or_else (u32 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      #      last  :=  l2.is_empty ? 0 : l2.last        # NYI: does not work since ? : is not lazy on its arguments!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      last  :=  {if l2.is_empty then u32 0 else l2.last}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: why this assymmetry between head returning option and last returning the element or panicking?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: can we get rid of the `{`/`}`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      s := t + first + last
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    while l != "" do
^^^^^^^^^^^^^^^^^^^^
      say s)
^^^^^^^^^^^
Call that triggers the escape: 
--CURDIR--/reg_issue2280.fz:32:5:
    for
----^
The found escape route: 
--CURDIR--/reg_issue2280.fz:32:5:
    for
----^--CURDIR--/reg_issue2280.fz:32:5:
    for
----^^^
      t := u32 0, s
^^^^^^^^^^^^^^^^^^^
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      l := io.buffered.read_line lm ? str String => str | io.end_of_file => ""
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: read_line should return a choice of String | end_of_file or similar
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      l2 := l.as_codepoints
^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .as_list       # NYI: would be good not to need this
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .map (.val)    # NYI: would be good not to need this
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
              .filter codepoint_type_ascii_digit.contains    # using brand new partial application!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      first := l2.head.or_else (u32 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      #      last  :=  l2.is_empty ? 0 : l2.last        # NYI: does not work since ? : is not lazy on its arguments!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      last  :=  {if l2.is_empty then u32 0 else l2.last}
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: why this assymmetry between head returning option and last returning the element or panicking?
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: would be nice if `u32` would be inferred and not needed explicitly here!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      # NYI: can we get rid of the `{`/`}`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      s := t + first + last
^^^^^^^^^^^^^^^^^^^^^^^^^^^
    while l != "" do
^^^^^^^^^^^^^^^^^^^^
      say s)
^^^^^^^^^^^
To solve this, either change the code where loop instance escapes or wrap loop in effect loop_allow_escape.

2 warnings.
