# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature float
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# float -- floating point values
#
#
# float is the abstract parent of concrete floating point features such as
# f32 or f64.
#
float<T: float<T>> : numeric<T>, floats<T> is


  # preconditions for basic operations: true if the operation's result is
  # representable for the given values.  For IEEE_754, all operations are
  # defined for all values.
  #
  redef prefix +! bool is true
  redef prefix -! bool is true
  redef infix +! (other T) bool is true
  redef infix -! (other T) bool is true
  redef infix *! (other T) bool is true
  redef infix /! (other T) bool is true
  redef infix %! (other T) bool is true
  redef infix **!(other T) bool is true


# floats -- unit type defining features related to float but not requiring
# an instance
#
floats<T: float<T>> : numerics<T> is

  # number of bytes required to store this value
  #
  bytes i32 is abstract

  # number of bits required to store this value
  #
  size => 8*bytes

  # number of bits used for mantissa, including leading '1' that is not actually
  # stored
  #
  significandBits i32 is abstract

  # number of bits used for exponent
  #
  exponentBits i32 is abstract

  exponentRange => -minExp..maxExp

  # non signaling not a number
  quietNaN => zero / zero

  # not a number
  NaN => quietNaN

  negativeInfinity => -one / zero

  positiveInfinity => one / zero

  # infinity
  infinity => positiveInfinity

  # eulers number 2.72..
  ℇ T is abstract

  # pi 3.14...
  π T is abstract

  minExp i32 is abstract
  maxExp i32 is abstract
  minPositive T is abstract
  max T is abstract
  epsilon T is abstract


  squareRoot(val T) T is abstract
  # square root
  sqrt(val T) => squareRoot val


  # exponentiation, logarithm

  exp (val T) T is abstract
  log (val T) T is abstract


  # trigonometric

  sin (val T) T is abstract
  cos (val T) T is abstract
  tan (val T) T is abstract
  asin(val T) T is abstract
  acos(val T) T is abstract
  atan(val T) T is abstract


  # hyperbolicus

  sinh (val T) T is abstract
  cosh (val T) T is abstract
  tanh (val T) T is abstract

  # arcus hyperbolicus

  two => one + one
  asinh(val T) T is
    # ln(x+sqrt(x^2+1))
    log (val + sqrt (val ** two + one))
  acosh(val T) T is
    # ln(x+sqrt(x^2-1))
    log (val + sqrt (val ** two - one))
  atanh(val T) T is
    # 1/2*ln((1+x)/(1-x))
    log ((one + val)/(one - val)) / two
