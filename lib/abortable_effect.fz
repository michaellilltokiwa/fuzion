# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature abortable_effect
#
# -----------------------------------------------------------------------


# abortable_effect provides means to define and use an abortable computation
#
public abortable_effect(R type) : effect effect_mode.plain is


  res option R := nil


  # does this effect support abort?
  #
  public redef abortable => true


  # replace effect in the current context by this and abort current execution
  #
  public abort(r R) void
  pre
    safety: abortable
  =>
    set res := r
    abort0


  # abort the current execution and return from the surrounding call to
  # abortable with result == false.
  #
  public return(r R) void
  pre
    safety: abortable
  =>
    abort r


  # install this abortable_effect and run code that produces a result of
  # type T or nil if aborted.
  #
  public go(T type, f ()->T) choice T R =>
    match run f
      t T => t
      nil =>
        match res
          nil => panic "fatal misuse detected, you did not use effect currently installed in env for aborting."
          r R => r



  # run `f`.
  # if `f` ran to completion its result
  # otherwise run def and return its result.
  #
  public run(T type, f, def ()->T) T =>
    match go f
      t T => t
      r R => def()


# abortable_effect that does not return value on abort
#
public abortable_effect : abortable_effect unit is
  public abort => abort unit
  public return => return unit
