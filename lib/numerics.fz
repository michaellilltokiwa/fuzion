# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature numerics
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# numerics -- unit type defining features related to numeric but not
# requiring an instance
#
numerics<T : numeric<T>> is

  # name of this numeric type, e.g., "u64"
  #
  name string is abstract

  # identity element for 'infix +'
  #
  zero T is abstract

  # identity element for 'infix *'
  #
  one  T is abstract

  # monoid of numeric with infix + operation.  Will create sum of all elements it
  # is applied to.
  #
  sum : Monoid<T> is
    redef infix ∙ (a, b T) T is a + b
    redef infix == (a, b T) bool is a == b
    redef e T is zero

  # monoid of numeric with infix * operation.  Will create product of all elements
  # it is applied to.
  #
  product : Monoid<T> is
    redef infix ∙ (a, b T) T is a * b
    redef infix == (a, b T) bool is a == b
    redef e T is one

  # monoid of numeric with infix +^ operation.  Will create sum of all elements it
  # is applied to, stopping at max/min value in case of overflow.
  #
  sumSaturating : Monoid<T> is
    redef infix ∙ (a, b T) T is a +^ b
    redef infix == (a, b T) bool is a == b
    redef e T is zero

  # monoid of numeric with infix *^ operation.  Will create product of all elements
  # it is applied to, stopping at max/min value in case of overflow.
  #
  productSaturating : Monoid<T> is
    redef infix ∙ (a, b T) T is a *^ b
    redef infix == (a, b T) bool is a == b
    redef e T is one
