# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature net.server
#
# -----------------------------------------------------------------------


# server -- effect for storing a bound - and in the
# case of TCP, listening - socket descriptor.
#
# Basic usage description:
# 1) Initialize the server, e.g. like this:
# `server family.ipv4 protocol.tcp 8080`
# 2) accept a new connection:
#      `server.accept connection_handler`
#
module:public server(
  state outcome i64,
  p protocol.val,
  _ unit,  # NYI: CLEANUP: rename `server(f family.val, p protocol.val, addr String, port u16)` to avoid these 3xunit
  _ unit,
  _ unit
) : effect
is

  # get the last error that occurred
  public last_error => state.bind unit (_ -> unit)

  # is the server running?
  public is_active =>
    state.ok


  # close server, stop listening on port
  public close =>
    match state
      d i64 =>
        s := match fuzion.sys.net.close d
          unit =>
            server (error "not initialized") nil unit unit unit
          error error =>
            server error nil unit unit unit
        s.replace
      * =>


  # accept new TCP connection
  # does nothing for UDP etc.
  # blocks until connection is established
  # NYI we may want to close server on certain errors?
  public accept(T type, ch Connection_Handler T) outcome T =>
    match state
      d i64 =>
        match fuzion.sys.net.accept d
          desc i64 =>

            # NYI install custom thread spawn effect
            # to close desc when all threads are finished
            #
            # no_threads : concur.Thread_Handler is
            #   spawn(code ()->unit) concur.thread.spawned =>
            #     panic "may not spawn threads in connection handler"
            # (concur.thread no_threads).instate_self ()->
            #   _ := connection_handler.env.handle_connection (channel desc)
            #   fuzion.sys.net.close desc

            lm : mutate is
            res := lm.instate_self ()->
              (io.buffered.reader lm (read_provider desc) 1024).with ()->
                (io.buffered.writer lm (write_provider desc) 1024).with ()->
                  (net.channel desc).instate_self ()->
                    ch.handle_connection lm

            _ := fuzion.sys.net.close desc

            res.bind T x->
              match x
                v T => v
                e error => e

          e error =>
            # NYI we may not need to close server on every error...
            (server e nil unit unit unit).replace
            e
      e error =>
        e


  # accept a TCP connection that will be handled in a separate thread
  #
  public accept_threaded(ch Connection_Handler unit) outcome unit =>
    match state
      d i64 =>
        match fuzion.sys.net.accept d
          desc i64 =>
            _ := concur.thread.spawn ()->
              lm : mutate is
              _ := lm.instate_self ()->
                (io.buffered.reader lm (read_provider desc) 1024).with ()->
                  (io.buffered.writer lm (write_provider desc) 1024).with ()->
                    (net.channel desc).instate_self ()->
                      ch.handle_connection lm
            unit
          e error =>
            (server e nil unit unit unit).replace
            e
      e error => e


# open new server bound to the any address listening on port
# closes currently installed server
# NYI blocking / none blocking
public server(f family.val, p protocol.val, port u16) outcome unit =>

  any_addr := (
    match f
      family.ipv4 => "0.0.0.0"
      family.ipv6 => "0:0:0:0:0:0:0:0"
  )

  server f p any_addr port


# open new server bound to addr listening on port
# closes currently installed server
# NYI blocking / none blocking
public server(f family.val, p protocol.val, addr String, port u16) outcome unit =>
  server.close

  match init_ip_server f p addr port
    desc i64 =>
      (server desc p unit unit unit).replace
      unit
    e error =>
      e


# get currently installed server from env
public server =>
  if !server.is_instated
    (server (error "not initialized") nil unit unit unit).default
  server.env


Server_Handler ref is
  initialize outcome i64 => abstract


# opens sockets, binds to port and sets socket to listening
init_ip_server(f family.val, p protocol.val, addr String, port u16) outcome i64 =>
  backlog := 10
  s := socket_type.by_protocol p

  # bind to port
  match fuzion.sys.net.bind f.as_num s.as_num p.as_num addr port
    err error => err
    sd i64  =>
      match p
        protocol.tcp =>
          # listen
          listen_res := fuzion.sys.net.listen sd backlog
          if listen_res != 0
            _ := fuzion.sys.net.close sd
            error "listening on socket failed with error $listen_res."
          else
            sd
        * =>
          sd
