# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature net.client
#
# -----------------------------------------------------------------------



# This tries establishing a connection to `host`
# on success it uses the installed `request_handler`
# to process the request.
#
# Minimal example:
#
#     rh : net.Request_Handler unit is
#       handle_request unit =>
#         say net.channel.env.get_peer_address
#
#     net.client rh net.family.ipv4 net.protocol.tcp "tokiwa.software" (u16 80) # NYI: type inference
#
#
# Blocks until connection is establised.
# NYI blocking / none blocking
#
public client(T type, LM type : mutate, rh Request_Handler T, f net.family.val, p net.protocol.val, host String, port u16) outcome T
=>
  s := net.socket_type.by_protocol p
  fuzion.sys.net.connect f.as_num s.as_num p.as_num host port
    .bind T (desc)->
      # NYI install custom thread spawn effect
      # NYI: BUG: (try net.request_handler).on ()->

      res := (io.buffered.reader LM (read_provider desc) 1024).with ()->
        (io.buffered.writer LM (write_provider desc) 1024).with ()->
          (net.channel desc).go ()->
            rh.handle_request

      _ := fuzion.sys.net.close desc

      res.bind T x->
        match x
          v T => v
          e error => e


# NYI: ENHANCEMENT: short-hands: client(host String) etc.
