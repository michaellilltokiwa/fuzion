# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature psMap
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# psSet -- a partially sorted set based on psMap
#
# psSet is a persistent set of ordered values.  This set is generally
# well-behaved with respect to cumulative and average performance.
#
# WARNING: Due to the high worst-case time for addition, this structure should
# not be used in situations when adding a single element repeatedly to the same
# instance of psSet is performance critical. If the resulting set's size n is a
# power of 2, this will trigger the worst-case addition time resutling in
# O(m*n log² n) for adding an element m times.
#
psSet<K : ordered<K>>
  (psm psMap<K,unit>)
  : Set<K>, List<K>
is


  # number of elements in this set
  #
  size => psm.size


  # list representation of values in this set
  #
  redef asList => psm.keys.asList


  # print contents of this set
  #
  show => psm.show


  # add new element k to this set.
  #
  add (k K) =>
    if has k
      psSet.this
    else
      psSet (psm.add k unit)


  # create a sorted array from the elements of this set
  #
  redef asArray => psm.asKeyArray


  # check if an element equal to given element k is part of this set
  #
  has (k K) => psm.has k


  # get the lowest element in this set
  #
  min => psm.min


  # get the highest element in this set
  #
  max => psm.max


  # union of two psSets
  #
  infix ⋃ (other psSet<K>) => psSet (psm ⋃ other.psm)


  # add all elements of the given List to this set
  #
  addAll (s List<K>) psSet<K> is
    addAllFromStream s.asStream


  # add all elements of the given stream to this set
  #
  addAllFromStream (s stream<K>) psSet<K> is
    if s.hasNext
      add(s.next).addAllFromStream s
    else
      psSet.this


  # number of entries in this set.  May be undefined, i.e., a range of
  # floating point numbers or an infinite set.
  #
  redef sizeOption option<i32> is size


  # does this set contain the given value?
  #
  contains (e K) bool is has e

/*
has     -- NYI: 'has' keyword not supported yet, so the following require an instance to be called on
*/

  # an empty psSet
  #
  empty => psSet<K>


  # monoid of psSet with infix ⋃ operation.
  #
  union : Monoid<psSet<K>> is
    redef infix ∙ (a, b psSet<K>) => a ⋃ b
    redef infix == (a, b psSet<K>) => (a ⋃ b).size = a.size  # NYI: a bit expensive
    redef e => empty
