# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature option
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# option -- feature wrapping a value or nothing
#
# option represents an optional value of type T
#
public option(public T type)
  : switch T nil,
    monad T (option T),
    property.equatable
is



  # Does this option contain no value of type T?
  #
  public is_nil => !exists


  # monadic operator
  #
  # This is handy to implement functions on optional values. As an example,
  # take an option string and you would like to add a filename suffix to
  # this string if it is present. Then you can do this as follows:
  #
  #   add_txt(o option string) => o >>= s -> s + ".txt"
  #
  # NYI: Should maybe have generic parameter B and result in option B
  #
  public redef infix >>= (f T -> option T) => option.this.bind f


  # monadic operator
  #
  # Same as non-generic >>=, but also maps to a different type B.
  #
  public bind(B type, f T -> option B) option B =>
    option.this ? v T => f v
                | nil => nil


  # synonym for infix >>=
  #
  public and_then (f T -> option T) => option.this >>= f


  # if this option is nil return the result of f
  # otherwise just return this option.
  #
  public or (f Lazy (option T)) option T =>
    if is_nil then f() else option.this


  # converts option to a string
  #
  # returns the result of $T for an option containing an instance
  # of T, alternatively returns $nil for an option that is nil.
  #
  public redef as_string String =>
    option.this ? v T => $v
                | nil => $nil



  # unwraps an option if it exists, returns default value otherwise.
  #
  public or_else(default Lazy T)
  =>
    option.this ? v T => v
                | nil => default



  # return function
  #
  public fixed redef type.return (a T) => option a


  # option is equatable only if T is
  #
  public redef type.is_equatable => T : property.equatable


  # equality
  #
  # NYI: UNDER DEVELOPMENT: (how) move this to switch?
  #
  public fixed redef type.equality(x, y option T) =>
    if T : property.equatable
      x ? v T => y.exists && v = y.val
        | nil => y.is_nil
    else
      panic "***"




# option with 1 argument provides an short-hand to wrap a value into an option
#
# Using this enables to write
#
#   o := option x
#
# instead of
#
#   o option TypeOfX := x
#
public option(T type, o option T) => o
