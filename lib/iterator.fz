# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature iterator
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------


# iterator -- effect
#
private iterator(
    T type,
    ih iterator_handler T,
    redef r effectMode.val
  ) : effect r is

  next =>
    (iterator T ih.next mode).ih.get

# get installed iterator effect for type T and supplier s
# can only be used once per type
iterator(T type, s () -> option T) =>
  if !(effects.exists (iterator T))
    ih := create_iterator_handler T nil s
    s := iterator T ih effectMode.default
  (iterator T .env)


private iterator_handler(T type) ref is
  next iterator_handler T is abstract
  get option T is abstract


private create_iterator_handler(redef T type, data option T, supplier () -> option T) : iterator_handler T is
  next iterator_handler T is
    match data
      T =>
        create_iterator_handler supplier() supplier
      nil =>
        create_iterator_handler T nil (()->panic "depleted supplier called...")
  get => data
