# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fault
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# fault -- effect that terminates a computation due to a runtime fault
#
public fault (
  # the handler this effect uses to fail
  p Fault_Handler
  ) : abortable_effect
is


  # cause check fault with the given message
  #
  cause_check(msg String) =>
    cause "check" msg


  # cause fault of given kind with the given message
  #
  public cause(# the kind of failure, e.g., "precondition", "check", etc.
               #
               kind,

               # message describing what failed, e.g. "debug: a > 0"
               #
               msg String)
  =>
    p.fail kind msg
    abort


  # install default fault handler
  type.install_default =>
    (fuzion.runtime.fault default_fault_handler).default


  # default fault handler using io.err and exit with return code 1
  #
  type.default_fault_handler : fuzion.runtime.Fault_Handler is

    # fail with given kind and given message.
    #
    # This implementation will print "*** runtime failure: $kind $msg"
    # and perform `exit 1`.
    #
    fail(# the kind of failure, e.g., "precondition", "check", etc.
         #
         kind,

         # message describing what failed, e.g. "debug: a > 0"
         #
         msg String)
    =>
      fuzion.sys.fatal_fault kind msg


# fault with no argument returns fault.env, the currently installed
# runtime fault handler.
#
public fault =>
  fault.install_default
  fault.env


# cause a check fault with given msg argument, i.e., call fault.cause_check msg, i.e.,
# use the current fault effect to fail with the given message.
#
public check_fault(msg String) => fault.cause_check msg


# Fault_Handler -- abstract fault hadler
#
public Fault_Handler ref is

  # fail with given kind and given message
  #
  public fail(kind, msg String) unit => abstract

  # Install this fault handler using a new instance of fault and run
  # `code` on it.  In case of an abort, return `def()` (NYI: def should be
  # removed and the result of fail should be returned instead).
  #
  public use(R type, code ()->R, def Lazy R) =>
    p := fault Fault_Handler.this
    (p.run code).or_else def
