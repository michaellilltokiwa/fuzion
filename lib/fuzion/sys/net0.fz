# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.sys.net0
#
# -----------------------------------------------------------------------

# groups networking related features
net0 is


  # create a new socket descriptor
  #
  # true  => arr_result[0] is the socket descriptor
  # false => arr_result[0] is an error number
  #
  socket(family, socket_type i32, arr_result Any) bool is intrinsic

  # convenience wrapper for socket intrinsic
  socket(family net.family.family_choice, socket_type net.socket_type.socket_type_choice) outcome i64 is
    arr array i64 := [0]
    if socket family.as_num socket_type.as_num arr.internalArray.data then arr[0] else error "socket open failed, error number: {arr[0]}"


  # bind server, zero on success
  # array data depends on the family.
  # - ipv4: first two bytes encode the port,
  #         then four bytes for the ip address
  #
  # returns zero on success, anything else is an error.
  #
  bind   (sd i64, family i32, arr_data Any, length i32) i32 is intrinsic


  # NYI wrap bind, listen, connect like this:
  # bind   (sd i64, family i32, arr_data Any, length i32) outcome unit is
  #   res := bind sd family arr_data length
  #   if res = 0 then unit else error "binding failed with error: $res."


  # activates the server socket, setting a backlog
  # for maximum amount of connections which are kept
  # waiting for acceptance.
  #
  # returns zero on success, anything else is an error.
  #
  listen (sd i64, backlog i32) i32 is intrinsic


  # accept a new connection for given socket.
  # blocks until there is a connection to accept.
  # returns a new / different descriptor which
  # corresponds to the accepted connection only.
  #
  # true  => arr_result[0] is the socket descriptor
  # false => arr_result[0] is an error number
  #
  accept (sd i64, arr_result Any) bool is intrinsic

  # convenience wrapper for accept intrinsic
  accept(sd i64) outcome i64 is
    arr array i64 := [0]
    if accept sd arr.internalArray.data then arr[0] else error "accept failed, error number: {arr[0]}"


  # connect the socket.
  # details depend on the used family:
  # - ipv4: first two bytes encode the port,
  #         then four bytes for the ip address
  #
  # returns zero on success, anything else is an error.
  #
  connect(sd i64, family i32, arr_data Any, length i32) i32 is intrinsic


  # read bytes into arr_data
  #
  # true  => arr_result[0] is the number of bytes read
  # false => arr_result[0] is an error number
  #
  read(sd i64, arr_data Any, length i32, arr_result Any) bool is intrinsic


  # reads a maximum of max_bytes from descriptor
  #
  read(descriptor i64, max_bytes i32) outcome (array u8) is
    buff := internal_array_init u8 max_bytes
    arr array i64 := [0]
    if read descriptor buff.data max_bytes arr.internalArray.data
      # NYI there should be a way to use a slice of internalArray to init array
      array u8 arr[0].as_i32 (idx -> buff[idx])
    else
      error "error: {arr[0]}"


  # write buffer bytes on socket
  #
  # returns zero on success, anything else is an error.
  #
  write(sd i64, arr_data Any, length i32) i32 is intrinsic


  # write data to descriptor
  write(descriptor i64, data array u8) outcome unit is
    res := write descriptor data.internalArray.data data.length
    if res = -1 then error "error: $res" else unit


  # close socket
  #
  # returns zero on success, anything else is an error.
  #
  close0(sd i64) i32 is intrinsic


  # close descriptor
  close(sd i64) outcome unit is
    res := close0 sd
    if res = -1 then error "error: $res" else unit

