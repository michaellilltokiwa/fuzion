# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.sys.process
#
# -----------------------------------------------------------------------

# fuzion.sys.process -- unit type grouping routines related to process
#
public process is

  create(p Any, r Any) i32 is intrinsic
  wait(p i64) is intrinsic

  # NYI move this to effect
  # NYI rename
  r_process(private p_id, stdin, stdout, stderr i64) is
    wait =>
      wait p_id

    close_write bool is
      pipe.close r_process.this.stdin = 0

    write(s String) outcome unit is
      arr := s.utf8.as_array
      res := pipe.write r_process.this.stdin arr.internalArray.data arr.count
      if res != arr.count
        error "error writing to stdin."
      else
        unit

    read(count i32) outcome String is
      arr := array u8 count i->0
      res := pipe.read r_process.this.stdout arr.internalArray.data arr.count
      if res = -1
        error "error reading from stdout."
      else
        String.type.from_bytes (array u8 res i->arr[i])


    # NYI cleanup resources

  create(p String) outcome r_process is
    arr_data := array i64 4 i->0
    if (create (c_string p) arr_data.internalArray.data) = -1
      error "error creating process"
    else
      r_process arr_data[0] arr_data[1] arr_data[2] arr_data[3]

