# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.std.fileio
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# fuzion.std.fileio -- fileio presents basic features to handle File I/O operations
#

public fileio is

  # reads a file and returns the content as an outcome array of u8 in case of success
  # and an error in case of failure
  #
  public read(
              # the (relative or absolute) file name, using platform specific path separators
              path string) outcome (array u8) is
    match get_file_size path
      num i64 =>
        file := array num.as_i32 i->(u8 0) # allocating an array the size of the file
        arr := fuzion.sys.c_string path # transforms the path to a utf8 byte array
        match open arr (i8 0)
          fd i64 =>
            read_result := read fd file.internalArray.data file.length
            if read_result == 0
              file
            else
              error "error number: $read_result"
          err_open error => err_open
      err_size error => err_size

  # intrinsic that fills an array u8 with the file bytes that is represented by the file descriptor
  # returns i8 0 in case of success and the error number/ -1 for the interpreter in case of failure
  #
  private read(
               # the file descriptor
               fd i64,
               # the internal array data representing the container for the bytes to be read from the file
               file_array Object,
               # the length of the array that represents the file bytes
               file_array_length i32) i8 is intrinsic


  # retrieves the file size in bytes and returns an outcome of error in case of an error
  #
  public get_file_size(
                       # the (relative or absolute) file name, using platform specific path separators
                       path string) outcome i64 is
    arr := fuzion.sys.c_string path
    size := get_file_size arr unit
    if size != -1
      size
    else
      error "an error occurred while retrieving the size of the file/dir: \"$path\""

  # intrinsic that returns the file size in bytes or -1 in case of an error
  #
  private get_file_size(
                        # the internal array data representing the file path in bytes
                        path Object,
                        # dummy parameter for overloading
                        _ unit) i64 is intrinsic


  # creates a new file using an array of u8 as content and a string as the file path
  # it overwrites the file, if it exists, or creates a new one if it does not exist
  # if the director(y/ies) in the path d(oes/o) not exist, or an error happens during the writing operation an error will be returned
  # in case of success a unit type will be the outcome
  #
  public write(
               # the (relative or absolute) file name, using platform specific path separators
               path string,
               # the content of the file as an u8 array
               content array u8) outcome unit is
    arr := fuzion.sys.c_string path
    match open arr (i8 1)
      fd i64 =>
        write_results := write fd content.internalArray.data content.length
        if write_results == 0
          unit
        else
          error "error number: $write_results"
      open_error error => open_error

  # intrinsic to write bytes (internal array data) in a file using the file descriptor
  # returns i8 0 in case of success
  # and the error number/ -1 in the interpreter in case of failure
  #
  private write(
                # the file descriptor
                fd i64,
                # the internal array data representing the content bytes to insert in file
                content Object,
                # the length of the internal array representing the content
                content_length i32) i8 is intrinsic


  # checks if the file/directory in the path exists or not
  # exists is wrapped with outcome bool so it returns TRUE if the file/directory exists, FALSE if it does not and error in case of an error
  #
  public exists(
                # the (relative or absolute) file/directory name, using platform specific path separators
                path string) outcome bool is
    arr := fuzion.sys.c_string path
    rslt := exists arr unit
    if rslt = 1
      true
    else if rslt = 0
      false
    else
      error "an error occurred while performing exists operation on the following file/dir: \"$path\""

  # intrinsic that checks the existence of the file/directory in the path
  # it returns 1 in case the file/dir exists, 0 in case it does not exist and -1 in case of an error
  #
  private exists(
                 # the internal array data representing the file/directory path in bytes
                 path Object,
                 # dummy parameter for overloading
                 _ unit) i8 is intrinsic


  # deletes the file/dir found in the path
  # returns unit as outcome in case of successful deletion and error in case of failure
  # if the targeted dir has content, then the return value will be error and the deletion will not take place
  #
  public delete(
                # the (relative or absolute) file name, using platform specific path separators
                path string) outcome unit is
    arr := fuzion.sys.c_string path
    if delete arr unit
      unit
    else
      error "an error occurred while performing the delete operation on the following file/dir: \"$path\""

  # intrinsic that deletes the file/dir represented by the path returning TRUE in case of success
  # and FALSE in case of failure
  #
  private delete(
                 # the internal array data representing the file/dir path in bytes
                 path Object,
                 # dummy parameter to avoid duplicate feature name
                 _ unit) bool is intrinsic


  #  moves file/dir from an old path to a the new path
  # can rename the file/dir as well by changing the name of the old file/dir to a new name in the new_path
  # returns a unit type as outcome in case of success and error in case of failure
  #
  public move(
              # the old (relative or absolute) file name, using platform specific path separators
              old_path string,
              # the new (relative or absolute) file name, using platform specific path separators
              new_path string) outcome unit is
    arr0 := fuzion.sys.c_string old_path
    arr1 := fuzion.sys.c_string new_path
    if move arr0 arr1 unit
      unit
    else
      error "an error occurred while performing the following move operation: \"$old_path\" --> \"$new_path\""

  # intrinsic that returns TRUE in case the move was successful and FALSE in case not
  #
  private move(
               # the internal array data representing the old file/dir path in bytes
               old_path Object,
               # the internal array data representing the new file/dir path in bytes
               new_path Object,
               # dummy parameter for overloading
               _ unit) bool is intrinsic


  # creates a directory using the specified path
  # parent directories in the path should exist otherwise, no creation will take place and an error will be the outcome
  #
  public create_dir(
                    # the (relative or absolute) dir name, using platform specific path separators
                    path string) outcome unit is
    arr := fuzion.sys.c_string path
    if create_dir arr unit
      unit
    else
      error "an error occurred while creating the following directory: \"$path\""

  # intrinsic that returns TRUE in case of success or FALSE in case of failure during dir creation
  #
  private create_dir(
                     # the internal array data representing the dir path in bytes
                     path Object,
                     # dummy parameter to enable overloading
                     _ unit) bool is intrinsic


  # intrinsic that fills an array with some metadata of the file/dir provided by the path
  # returns TRUE in case the operation was successful and FALSE in case of failure
  # in case the path refers to a symbolic link it resolves it and returns info about the actual file
  #
  stats(
        # the internal array data representing the file/dir path in bytes
        path Object,
        # the iternal array data representing the metadata fields [size in bytes, creation_time in seconds, regular file? 1 : 0, dir? 1 : 0]
        meta_data Object) bool is intrinsic

  # intrinsic that fills an array with some metadata of the file/dir provided by the path
  # returns TRUE in case the operation was successful and FALSE in case of failure
  # in case the path refers to a symbolic link it does not attempt to follow it and returns info about the link itself
  #
  lstats(path Object, meta_data Object) bool is intrinsic # NYI behaves the same as stats in the interpreter


  # Opens an IO source using a Fuzion Object as path and an i8 flag to represent the opening method (Read: 0, Write: 1, Append: 2)
  # returns outcome i64 representing the file descriptor in success
  # returns an error in failure
  #
  public open(
              # a Fuzion Object represention the path for the source to be opened
              path Object,
              # a flag to speicify the open method (Read: 0, Write: 1, Append: 2)
              flag i8) outcome i64 is
    open_results := array 2 i->(i64 0) # open_results[file descriptor, error number]
    open path open_results.internalArray.data flag
    if open_results[1]==0
      open_results[0]
    else
      error "error number: {open_results[1]}"

  # intrinsic that fills a Fuzion object with the file descriptor and the error number from C back-end/ -1 in the interpreter
  # after opening the source represented by the path parameter
  #
  private open(
               # a Fuzion Object represention the path for the source to be opened
               path Object, 
               # open_results[file descriptor, error number] as a Fuzion Object
               open_results Object,
               # opening flag (Read: 0, Write: 1, Append: 2)
               flag i8) unit is intrinsic


  # Closes an IO source using an i64 representing the source handler (file descriptor)
  # returns outcome unit in case of success and an error in case of failure
  #
  public close(
               # file descriptor
               fd i64) outcome unit is
    closing_result := close fd unit
    if closing_result == 0
      unit
    else
      error "error number: $closing_result"

  # intrinsic that takes an i64 value that represents the file descriptor and closes the stream
  # returns an i8 to represent the result of the operation
  # 0 in case no errors occurred and the error number in case the operation failed in the C back-end/ -1 in the interpreter
  #
  private close(
                # file descriptor
                fd i64,
                # dummy variable to enable overload
                _ unit) i8 is intrinsic


  # seek offset in the stream represented by fd
  # returns an outcome i64 that represents the new offset
  # returns an error in case of failure
  #
  public seek(
              # file descriptor
              fd i64,
              # the offset to seek from the beginning of this file
              offset i64) outcome i64 is
    arr := array 2 (i -> i64 0)
    seek fd offset arr.internalArray.data
    if arr[1]==0
      arr[0]
    else
      error "error number: {arr[1]}"

  # intrinsic to set the file-pointer offset at which the next read or write occurs
  # the offset is measured from the beginning of the file indicated by the file descriptor
  # and fills a Fuzion object with the new offset
  # and the error number from the C back-end/ -1 in the interpreter
  #
  private seek(
               # file descriptor
               fd i64,
               # the offset to seek from the beginning of this file
               offset i64,
               # Array data [new file position, error number]
               seek_results Object) unit is intrinsic


  # returns the current file-pointer offset as an outcome i64,
  # the offset is measured from the beginning of the file indicated by the file descriptor
  # returns the current offset in success and error in failure
  #
  public file_position(
                       # file descriptor
                       fd i64) outcome i64 is
    arr := array 2 (i -> i64 0)
    file_position fd arr.internalArray.data
    if arr[1]==0
      arr[0]
    else
      error "error number: {arr[1]}"

  # intrinsic that fills a Fuzion object with the current file stream position
  # and the error number from C back-end/ -1 in the interpreter
  #
  private file_position(
                        # file descriptor
                        fd i64,
                        # Array data [new file position, error number]
                        position_results Object) unit is intrinsic
