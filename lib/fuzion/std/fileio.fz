# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.std.fileio
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# fuzion.std.fileio -- fileio presents two simple methods:
#
# read to retrieve data from a file
#
# write to insert data into a file 
#
public fuzion.std.fileio is

  # reads a file and returns the content as an array of u8.
  #
  public read(
              # the (relative or absolute) file name, using platform specific path separators  
              path string) =>
    file := array get_file_size(path).as_i32 i->(u8 0) # allocating an array the size of the file
    arr := path.utf8.asArray # transforms the path to a utf8 byte array
    read arr.internalArray.data arr.length file.internalArray.data file.length
    file

  # intrinsic that fills an array u8 with the file bytes.
  # 
  private read(
               # the internal array data representing the file path in bytes
               path Object,
               # the length of the internal array representing the path
               path_length i32,
               # the internal array data representing the container for the bytes to be read from the file
               file_array Object,
               # the length of the array that represents the file bytes
               file_array_length i32) i64 is intrinsic

  # retrieves the file size in bytes and returns -1 in case of an error
  #
  public get_file_size(
                       # the (relative or absolute) file name, using platform specific path separators
                       path string) =>
    arr := path.utf8.asArray
    get_file_size arr.internalArray.data arr.length

  # intrinsic that returns the file size in bytes or -1 in case of an error
  #
  private get_file_size(
                        # the internal array data representing the file path in bytes
                        path Object,
                        # the length of the internal array representing the path
                        path_length i32) i64 is intrinsic

  # creates a new file using an array of u8 as content and a string as the file path
  # it overwrites the file, if it exists, or creates a new one if it does not exist
  # if the director(y/ies) in the path d(oes/o) not exist, no file shall be created
  #
  public write(
               # the (relative or absolute) file name, using platform specific path separators
               path string,
               # the content of the file as an u8 array
               content array<u8>) =>
    arr := path.utf8.asArray
    write arr.internalArray.data arr.length content.internalArray.data content.length

  # intrinsic to write bytes (internal array data) in a file using the file path
  #
  private write(
                # the internal array data representing the file path in bytes
                path Object,
                # the length of the internal array representing the path
                path_length i32,
                # the internal array data representing the content bytes to insert in file
                content Object,
                # the length of the internal array representing the content
                content_length i32) unit is intrinsic

  # checks if the file/directory in the path exists or not
  # returns TRUE if the file/directory exists and FALSE if it does not or there is an error
  #
  public exists(
                # the (relative or absolute) file/directory name, using platform specific path separators
                path string) =>
    arr := path.utf8.asArray
    exists arr.internalArray.data arr.length

  # intrinsic that checks the existence of the file/directory in the path
  private exists(
                 # the internal array data representing the file/directory path in bytes
                 path Object,
                 # the length of the internal array representing the path
                 path_length i32) bool is intrinsic

  # deletes the file/dir found in the path
  # returns TRUE in case of successful deletion and FALSE in case of failure or error
  # if the targeted dir has content, then the return value will be FALSE and the deletion will not take place
  #
  public delete(
                # the (relative or absolute) file name, using platform specific path separators
                path string) =>
    arr := path.utf8.asArray
    delete arr.internalArray.data arr.length

  # intrinsic that deletes the file/dir found in the path returning TRUE in case of success
  # and FALSE in case of failure
  #
  private delete(
                 # the internal array data representing the file/dir path in bytes
                 path Object,
                 # the length of the internal array representing the path
                 path_length i32) bool is intrinsic
