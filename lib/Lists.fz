# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature Lists
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# Lists -- unit type defining features related to List but not requiring
# an instance
#
Lists is


  # create an empty list
  #
  empty<T> List<T> is
    e list<T> := nil
    e


  # monoid of Lists with infix concatentation operation.
  #
  concatMonoid<T> : Monoid<List<T>> is

    # associative operation
    #
    infix âˆ™ (a, b List<T>) List<T> is a.concatLists b

    # equality
    #
    redef infix == (a, b List<T>) =>
      fuzion.std.panic "NYI: Lists.concatMonoid.infix ==, requires T : hasEquals"

    # identity element
    #
    e => empty<T>


  # determine the index of element x within list l.  0 if x is at the head
  # of the list, 1 if it comes directly after head, etc. nil if x is not
  # in the list.
  #
  indexIn<A: hasEquals<A>>(l List<A>, x A) => (searchableList<A> l).indexOf x


  # get the index of x within this list or nil if it does not exist
  #
  find<A: hasEquals<A>>(l List<A>, x List<A>) => (searchableList<A> l).find x
