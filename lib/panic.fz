# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature panic
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# panic -- effect that terminates a computation in panic
#
panic (

  # the provider this effect uses to panic
  p Panic_Provider,

  redef r effectMode.val
  ) : effect r
is

  # panic with the given message
  #
  panic(msg String) =>
    p.do_panic msg
    abort


# panic with no argument returns panic.env, the currently installed
# panic provider.
#
panic =>
  panic_type.installDefault
  panic.env


# panic with a msg argument calls panic.panic msg, i.e., it uses the
# current panic efffect to panic with the given message.
#
panic(msg String) => panic.panic msg


# Panic_Provider -- abstract panic
#
Panic_Provider ref is

  # panic with the given message
  #
  # NYI: The result of do_panic should be returend by `use`, but there is
  # currently no way we could do this.  One way would be to add a local
  # variable of type `Any` to `panic` and store the result there and then
  # cast it to the correct type in `use` (see
  # https://flang.dev/design/type_casts_ref)
  #
  do_panic(msg String) unit is abstract

  # Install this panic provider using a new instance of panic an run
  # `code` on it. In case of an abort, return `def()` (NYI: def should be
  # removed and the result of do_panic should be returned instead).
  #
  use(R type, code, def ()->R) =>
    p := panic Panic_Provider.this effectMode.plain
    p.run code unit->def()


# type related to panic declaring features not requiring an instance of panic
#
panic_type is

  installDefault is
    if !effects.exists panic
      _ := panic defaultPanicProvider effectMode.default

  # default panic provider using io.err and exit with return code 1
  #
  defaultPanicProvider : Panic_Provider is

    # panic with the given message and exit with return code 1
    #
    do_panic(msg String) =>
      io.err.println "*** panic: $msg"
      exit 1
