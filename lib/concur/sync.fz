# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature concur.sync
#
# -----------------------------------------------------------------------

# concur.sync -- synchronization primitives
#
public sync is

  mtx_init outcome fuzion.sys.Pointer => intrinsic
  mtx_lock(mtx fuzion.sys.Pointer) bool => intrinsic
  # NYI: mtx_timedlock
  mtx_trylock(mtx fuzion.sys.Pointer) bool => intrinsic
  mtx_unlock(mtx fuzion.sys.Pointer) bool => intrinsic
  mtx_destroy(mtx fuzion.sys.Pointer) unit => intrinsic

  module cnd_init(mtx fuzion.sys.Pointer) outcome fuzion.sys.Pointer => intrinsic
  module cnd_signal(cnd fuzion.sys.Pointer) bool => intrinsic
  module cnd_broadcast(cnd fuzion.sys.Pointer) bool => intrinsic
  module cnd_wait(cnd fuzion.sys.Pointer, mtx fuzion.sys.Pointer) bool => intrinsic
  # NYI: cnd_timedwait
  module cnd_destroy(cnd fuzion.sys.Pointer) unit => intrinsic


  # NYI: documentation missing, waiting for JVM backend impl

  private:public mutex(module mtx fuzion.sys.Pointer) : effect is

    public type.new(T type, code ()->T) outcome T =>
      concur.sync.mtx_init.bind T mtx->
        res := (concur.sync.mutex mtx).instate_self code
        concur.sync.mtx_destroy mtx
        res

    public synchronized(T type, code ()->T) T =>
      check mtx_lock mtx
      res := code.call
      check mtx_unlock mtx
      res

    public condition(T type, code ()->T) outcome T =>
      (concur.sync.cnd_init mtx).bind T cnd->
        res := (concur.sync.condition cnd mtx).instate_self code
        concur.sync.cnd_destroy cnd
        res


  private:public condition(cnd fuzion.sys.Pointer, mtx fuzion.sys.Pointer) : effect is

    public signal => cnd_signal cnd
    public broadcast => cnd_broadcast cnd
    # NYI: UNDER DEVELOPMENT: we should ensure that mutex is locked
    public wait => cnd_wait cnd mtx
