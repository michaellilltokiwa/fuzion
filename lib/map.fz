# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature map
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# map -- an abstract map from keys K to values V
#
map<K, V> ref is

  # number of entries in this map
  #
  size i32 is abstract


  # get the value k is mapped to, or nil if none.
  #
  index [] (k K) option<V> is abstract


  # get a stream of all key/value pairs in this map
  #
  items Sequence<tuple<K,V>> is abstract


  # get a stream of all keys in this map
  #
  keys Sequence<K> is
    res : Sequence<K> is
      redef asStream => items.asStream.map<K> (t -> (k,_) := t; k)
    res


  # check if key k is present in the set of keys
  #
  has (k K) => map.this[k]??


  # get a stream of all values in this map
  #
  values Sequence<V> is
    res : Sequence<V> is
      redef asStream => items.asStream.map<V> (t -> (_,v) := t; v)
    res


  # create a string containing all mappings
  #
  redef asString =>
    for
      r := "", r + c + "($k => {index[] k})"
      k in keys
      c := "", ", "
    else
      r
