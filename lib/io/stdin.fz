# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature stdin
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------


# stdin -- effect providing several features
# for consuming the given Byte_Input_Handler
#
private stdin(ip io.Byte_Input_Handler) : simpleEffect is


  # read a single byte from stdin
  #
  byte =>
    (stdin ip.next).ip.get


  # an infinite list of either a byte, an end_of_file or an error
  # Caution!: this list is not immutable since it is constructed lazily by reading from stdin!
  # you may iterate only once.
  # Additionally there may be read more from stdin than what is consumed
  # via this list.
  # NYI: How can we lessen these imperfections?
  #
  bytes list (choice u8 io.end_of_file error) is
    list byte ()->bytes


  # read one codepoint from stdin
  # returns end_of_file if stdin is depleted or
  # error in case of an error while reading the codepoint
  #
  codepoint => codepoint0


  # a - possibly infinite - list of codepoints read from stdin
  # Caution!: this list is not immutable since it is constructed lazily by reading from stdin!
  # you may iterate only once.
  # Additionally there may be read more from stdin than what is consumed
  # via this list.
  # NYI: How can we lessen these imperfections?
  #
  codepoints list (choice codepoint io.end_of_file error) is
    list codepoint0 ()->codepoints


  # read n codepoints from stdin or
  # less if an end_of_file is encountered
  # while reading
  #
  read (n i32) => read0 n


  # read from stdin until end of line or end of file
  #
  read_line => read_line0


  # install default instance of stdin
  #
  type.install_default =>
    (io.stdin (default_input_handler (error "not initialized"))).default


  # the default input handler reading bytes via fuzion.sys.stdin.nextByte
  #
  type.default_input_handler(r choice u8 io.end_of_file error) : io.Byte_Input_Handler is


    next io.Byte_Input_Handler is
      v := fuzion.sys.stdin.next_byte
      if v = -1
        default_input_handler io.end_of_file
      else if v < -1
        default_input_handler (error "an error occurred while reading stdin")
      else
        default_input_handler v.as_u8


    get => r


private read_line0 outcome String : character_encodings is
  stdin.codepoints
    .reduce_or_error "" (r, t ->
      match t
        c codepoint =>
          if c.val = ascii.lf.as_u32 || c.val = ascii.cr.as_u32
            if r.is_empty # we read nothing yet, so we just skip the lf/cr
              r
            else
              abort (outcome r)
          else
            r + c
        io.end_of_file =>
          abort (outcome r)
        e error =>
          abort (outcome String) e
    )


# read n codepoints from stdin
# may return less than n bytes if end of file is reached
# or error if stdin can not be read right now
#
private read0(n i32) outcome String
pre n â‰¥ 0
is
  (1..n)
    .reduce_or_error "" (r, t ->
      match codepoint0
        c codepoint =>
          r + c
        io.end_of_file =>
          abort (outcome r) // return what we read so far
        e error =>
          abort (outcome String) e   // return only the error, discarding what we read so far
      )


# try reading a codepoint from stdin
#
private codepoint0 choice codepoint io.end_of_file error is
  match stdin.byte
    b u8 =>
      match codepoint.type.num_utf8_bytes b
        n i32 =>
          rest := (2..n)
            # NYI use reduce_or_error once outcome is open generic
            .reduce (choice (Sequence u8) io.end_of_file error) [b] (r,t ->
              match r
                seq Sequence u8 =>
                  match stdin.byte
                    b u8 => seq ++ [b]
                    io.end_of_file =>
                      abort (choice (Sequence u8) io.end_of_file error) io.end_of_file
                    e error =>
                      abort (choice (Sequence u8) io.end_of_file error) e
                * => fuzion.std.panic "should not be possible"
              )
          match rest
            l Sequence u8 => String.type.from_bytes l
                                    .as_codepoint_sequence
                                    .first
            io.end_of_file => io.end_of_file
            e error => e // error occurred while reading the rest of utf8 bytes
        e error => e     // first byte is not the start of a utf8 codepoint
    io.end_of_file => io.end_of_file
    e error => e         // not even single byte could be read from stdin



# short-hand for accessing stdin effect in current environment
#
stdin =>
  stdin.type.install_default
  stdin.env


Byte_Input_Handler ref is


  next io.Byte_Input_Handler is abstract


  # NYI using choice, until open generic for error in outcome is implemented
  #
  get choice u8 io.end_of_file error is abstract
