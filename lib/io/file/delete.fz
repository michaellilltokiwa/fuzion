# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature delete
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# delete -- effect wrapping the file delete operation
#
private delete(
    dop Delete_Operation,
    redef r effectMode.val,
    _ unit
  ) : deletes, effect r is

    # deletes the file/dir found in the path
    # returns unit as outcome in case of successful deletion and error in case of failure
    # if the targeted dir has content, then the return value will be error and the deletion will not take place
    #
    delete(
           # the (relative or absolute) dir name, using platform specific path separators
           path String) =>
        tmp := dop.delete path
        replace
        tmp

# short-hand for creating and intalling effect
#
delete_custom(f () -> unit) => delete_custom default_delete_operation f # NYI : overload

# short-hand for creating and installing effect
#
delete_custom(dop Delete_Operation, f () -> unit) =>
    s := delete dop effectMode.new unit
    s.use0 f
    unit

# short-hand for accessing delete effect in current environment and performing the default delete operation using io.file.delete.delete path
# deletes the file/dir found in the path
# returns unit as outcome in case of successful deletion and error in case of failure
# if the targeted dir has content, then the return value will be error and the deletion will not take place
#
delete(path String) =>
  deletes.installDefault
  delete.env.delete path

# reference to the delete operations that could take place
#
Delete_Operation ref is
    delete(path String) outcome unit is abstract

# the default file/dir delete operation via fuzion.std.fileio.delete
#
default_delete_operation : Delete_Operation is
    delete(path String) =>
        fuzion.std.fileio.delete path

# unit type feature defining features related to delete effect but not requiring an
# instance.
#
deletes is
    # install default effect io.file.delete
    installDefault unit is
        if !(effects.exists io.file.delete)
            _ := delete default_delete_operation effectMode.default unit
