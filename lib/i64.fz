# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature i64
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# i64 -- 64-bit signed integer values
#
i64(val i64) : wrapping_integer, has_interval is

  thiz => i64.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrapped_on_neg => is_min

  # would addition thiz + other cause an overflow or underflow?
  fixed overflow_on_add (other i64) => thiz > i64 0 && i64.type.max -° thiz < other
  fixed underflow_on_add(other i64) => thiz < i64 0 && i64.type.min -° thiz > other

  # would subtraction thiz - other cause an overflow or underflow?
  fixed overflow_on_sub (other i64) => thiz > i64 0 && thiz -° i64.type.max > other
  fixed underflow_on_sub(other i64) => thiz < i64 0 && thiz -° i64.type.min < other

  # would multiplication thiz * other cause an overflow or underflow?
  fixed overflow_on_mul (other i64) => if sign *° other.sign ≤ 0 false else (thiz *° other / other) != thiz
  fixed underflow_on_mul(other i64) => if sign *° other.sign ≥ 0 false else (thiz *° other / other) != thiz

  # neg, add, sub, mul with wrap-around semantics
  fixed prefix -° i64 is intrinsic
  fixed infix +° (other i64) i64 is intrinsic
  fixed infix -° (other i64) i64 is intrinsic
  fixed infix *° (other i64) i64 is intrinsic

  # division and remainder with check for div-by-zero
  fixed infix / (other i64)
    pre
      safety: other != i64 0
   => div other
  fixed infix % (other i64)
    pre
      safety: other != i64 0
   => mod other

  # priv division and remainder with crash in case of div-by-zero
  priv div (other i64) i64 is intrinsic
  priv mod (other i64) i64 is intrinsic

  # bitwise and, or and xor operations
  fixed infix &  (other i64) i64 is intrinsic
  fixed infix |  (other i64) i64 is intrinsic
  fixed infix ^  (other i64) i64 is intrinsic

  # shift operations (signed)
  fixed infix >> (other i64) i64 is intrinsic
  fixed infix << (other i64) i64 is intrinsic

  # this i64 as an i8
  as_i8 i8
    pre
      thiz ≥ i8.type.min.as_i64,
      thiz ≤ i8.type.max.as_i64
    is
      low8bits.as_i8


  # this i64 as an i16
  as_i16 i16
    pre
      thiz ≥ i16.type.min.as_i64,
      thiz ≤ i16.type.max.as_i64
    is
      low16bits.as_i16


  # this i64 as an i32
  as_i32 i32
    pre
      thiz ≥ i32.type.min.as_i64,
      thiz ≤ i32.type.max.as_i64
    is
      low32bits.cast_to_i32


  # this i64 as an u8
  as_u8 u8
    pre
      thiz ≥ (i64 0)
#      thiz ≤ u8.type.max.as_i64
#    post
#      analysis: result.as_u64 = thiz
    is
      low8bits


  # this i64 as an u16
  as_u16 u16
     pre
      thiz ≥ (i64 0)
#      thiz ≤ u16.type.max.as_i64
#    post
#      analysis: result.as_u64 = thiz
    is
      low16bits


  # this i64 as an u32
  as_u32 u32
    pre
      thiz ≥ (i64 0)
#      thiz ≤ u32.type.max.as_i64
#    post
#      analysis:  result.as_i64 = thiz
    is
      low32bits


  # this i64 as an u64
  as_u64 u64
    pre
      thiz ≥ (i64 0)
#    post
#      analysis:  result.as_i64 = thiz
    is
      cast_to_u64


  # this i64 as an u128
  as_u128 u128
    pre
      thiz ≥ (i64 0)
    post
      analysis:  result.as_i64 = thiz
    is
      u128 0 cast_to_u64


  # this i64 as an int
  as_int int is
    int val


  # this i64 as an uint
  as_uint uint
  pre val ≥ i64 0
  is
    uint val.as_u64


  # casting bit representation to unsigned
  low8bits   u8  is cast_to_u64.low8bits
  low16bits  u16 is cast_to_u64.low16bits
  low32bits  u32 is cast_to_u64.low32bits
  cast_to_u64 u64 is intrinsic

  # conversion to float
  as_f64 f64 is intrinsic
  as_f32 => as_f64.as_f32

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from has_interval is abstract, fz should not complain about this conflict.
  fixed redef max => i64 0x_7fff_ffff_ffff_ffff


  # create hash code from this number
  hash u64 is
    cast_to_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highest_one_bit i64 is
    val.cast_to_u64.highest_one_bit.cast_to_i64


  # count the number of trailing zeros in this integer.
  #
  trailing_zeros i32 is
    val.cast_to_u64.trailing_zeros


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  ones_count i32 is
    val.cast_to_u64.ones_count


  # -----------------------------------------------------------------------
  #
  # type features:


  # identity element for 'infix +'
  #
  fixed type.zero i64 is 0


  # identity element for 'infix *'
  #
  fixed type.one  i64 is 1


  # equality
  #
  fixed type.equality(a, b i64) bool is intrinsic


  # total order
  #
  fixed type.lteq(a, b i64) bool is intrinsic


  # returns the number in whose bit representation all bits are ones
  fixed redef type.all_bits_set => i64 -1


  # minimum
  #
  fixed type.min => i64 -0x_8000_0000_0000_0000


  # maximum
  #
  fixed type.max => i64 0x_7fff_ffff_ffff_ffff
