# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature numeric
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# numeric -- parent of all numeric features
#
numeric(redef T type : numeric T) : has_hash, has_total_order, numerics T is

  # get numeric.this value of type T.  This is used for a generic implemention
  # of some features (e.g. prefix -, abs)
  thiz T is abstract

  is_zero => numeric.this = numeric.this.type.zero
  is_one  => numeric.this = numeric.this.type.one

  # basic operations: 'prefix +' (identity)
  prefix + T
    pre
      safety: +!thiz
  is thiz

  # basic operations: 'prefix -' (negation)
  prefix - T
    pre
      safety: -!thiz
  is zero - thiz

  # basic operations: 'infix +' (addition)
  infix +  (other T) T
    pre
      safety: thiz +! other
  is abstract

  # basic operations: 'infix -' (subtraction)
  infix -  (other T) T
    pre
      safety: thiz -! other
  is abstract

  # basic operations: 'infix *' (multiplication)
  infix *  (other T) T
    pre
      safety: thiz *! other
  is abstract

  # basic operations: 'infix /' (division)
  infix /  (other T) T
    pre
      safety: thiz /! other,
      safety: other != zero
  is abstract

  # basic operations: 'infix %' (division remainder)
  infix %  (other T) T
    pre
      safety: thiz %! other,
      safety: other != zero
  is abstract

  # basic operations: 'infix **' (exponentiation)
  infix ** (other T) T
    pre
      safety: thiz **! other,
      safety: other ≥ zero
  is abstract


  # preconditions for basic operations: true if the operation's result is
  # representable for the given values
  #
  # This does not check if the operation is defined (i.e, it
  # returns true for '3/!0' or '0**!0'.
  #
  prefix +! bool is true
  prefix -! bool is abstract
  infix +! (other T) bool is abstract
  infix -! (other T) bool is abstract
  infix *! (other T) bool is abstract
  infix /! (other T) bool is abstract
  infix %! (other T) bool is abstract
  infix **!(other T) bool is abstract


  # overflow checking operations
  prefix -? num_option T is - thiz
  infix +? (other T) num_option T is thiz + other
  infix -? (other T) num_option T is thiz - other
  infix *? (other T) num_option T is thiz * other
  infix **?(other T) num_option T is abstract

  # saturating  operations
  prefix -^  T is - thiz
  infix +^ (other T) T is thiz + other
  infix -^ (other T) T is thiz - other
  infix *^ (other T) T is thiz * other
  infix **^(other T) T is abstract


  sign => if numeric.this = numeric.this.type.zero then 0 else if numeric.this > numeric.this.type.zero then 1 else -1

  abs => if sign ≥ 0 then thiz else -thiz


  # the u32 value corresponding to this
  # note: potential fraction will be discarded
  # NYI replace this by as_u32?
  to_u32 u32
    pre
      debug: numeric.this ≥ numeric.this.type.zero
  is
    if (numeric.this ≥ numeric.this.type.one) ((thiz - one).to_u32 + 1)
    else 0


  # this numeric value as an u8
  as_u8 u8
    pre
      debug: numeric.this ≥ numeric.this.type.zero
  is abstract


  # find the highest power of b that is less or equal than thiz.
  #
  private highest(b T) T
    pre
      debug: thiz.sign ≥ 0
    post
      debug: (numeric.this = numeric.this.type.zero: result = one),
      debug: (numeric.this != numeric.this.type.zero: thiz / b < result ≤ thiz)
  # NYI: original postcondition code should cause a compiler error since
  # result.infix <= expects an argument of type T while integer.this is
  # not of type T.
  #
  #     integer.this != zero: integer.this / b < result <= integer.this
  is
    for
      bs := one, bs * b
    while thiz / b ≥ bs


  # is this part of given set
  #
  # NYI: infix operators currently always use dynamic binding on the lhs and pass
  # the rhs as an argument.  If we would support an 'rinfix ∈' that would use the
  # rhs for dynamic binding and the lhs as argument, we could define '∈' in Set T
  # and it would work for all set types.
  #
  element_of(s container.Set T) => s.contains thiz
  infix ∈ (s container.Set T) => numeric.this.element_of s


  # is this not part of given set
  #
  not_element_of(s container.Set T) => !element_of s
  infix ∉ (s container.Set T) => numeric.this.not_element_of s


  # -----------------------------------------------------------------------
  #
  # type features:


  # identity element for 'infix +'
  #
  type.zero numeric.this.type is abstract


  # identity element for 'infix *'
  #
  type.one  numeric.this.type is abstract


  # the value corresponding to v in whatever integer implementation we have,
  # maximum in case of overflow
  #
  # NOTE: this is marked 'dyn' to get an implementation for all heirs for numeric
  #
  type.from_u32(v u32) numeric.this.type is
    if v = (u32 0) zero else one # NYI: #706: (from_u32 v-1) +^ one


  # equality
  #
  fixed type.equality(a, b numeric T) bool is
    T.equality a b


  # total order
  #
  fixed type.lteq(a, b numeric T) bool is
    T.lteq a b


  # monoid of numeric with infix + operation.  Will create sum of all elements it
  # is applied to.
  #
  type.sum : Monoid T is
    redef infix ∙ (a, b T) => a + b
    redef e => zero.thiz


  # monoid of numeric with infix * operation.  Will create product of all elements
  # it is applied to.
  #
  type.product : Monoid T is
    redef infix ∙ (a, b T) => a * b
    redef e => one.thiz


  # monoid of numeric with infix +^ operation.  Will create sum of all elements it
  # is applied to, stopping at max/min value in case of overflow.
  #
  type.sum_saturating : Monoid T is
    redef infix ∙ (a, b T) => a +^ b
    redef e => zero.thiz


  # monoid of numeric with infix *^ operation.  Will create product of all elements
  # it is applied to, stopping at max/min value in case of overflow.
  #
  type.product_saturating : Monoid T is
    redef infix ∙ (a, b T) => a *^ b
    redef e => one.thiz


# numerics -- unit type defining features related to numeric but not
# requiring an instance
#
numerics(T type : numeric T) is

  # identity element for 'infix +'
  #
  zero T is abstract # NYI: #706: T.zero

  # identity element for 'infix *'
  #
  one  T is abstract # NYI: #706: T.one

  # the constant '2' in whatever integer implementation we have, maximum in case of overflow
  two => from_u32(2)

  # the constant '10' in whatever integer implementation we have, maximum in case of overflow
  ten => from_u32(10)

  # the value corresponding to v in whatever integer implementation we have, maximum in case of overflow
  from_u32(v u32) T is # T.from_u32 v
    if v = (u32 0) zero else (from_u32 v-1) +^ one
