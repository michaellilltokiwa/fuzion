# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature Entry
#
# -----------------------------------------------------------------------


# Entry -- an entry of a mutable tree map
#
private Entry(LM type : mutate, KEY type : has_total_order, redef V type, key KEY, val V) ref : Map KEY V is


  # reference to the left subtree at this entry, or, if it is empty, nil
  #
  private left := LM.env.new (option (Entry LM KEY V)) nil


  # reference to the right subtree at this entry, or if it is empty, nil
  #
  private right := LM.env.new (option (Entry LM KEY V)) nil


  # height of the subtree whose root is this entry
  #
  private height := LM.env.new i32 0


  # get the value stored in this submap at key k, nil if k is not a key
  # in this submap
  #
  private get(k KEY) option V is
    if k < key
      left.get ? nil => nil
               | e Entry => e.get k
    else if key < k
      right.get ? nil => nil
                | e Entry => e.get k
    else
      val


  # number of entries in this map
  #
  size i32 is
    items.count


  # get the value k is mapped to, or nil if none.
  #
  index [] (k KEY) option V is
    get k


  # get a sequence of all key/value pairs in this map
  #
  items Sequence (tuple KEY V) is

    head := (key, val)

    tail Lazy (list (tuple KEY V)) := ()->
      ((left.get.map x->x.items).get ((list (tuple KEY V)).type.empty)) ++
        ((right.get.map x->x.items).get ((list (tuple KEY V)).type.empty))

    list head tail
