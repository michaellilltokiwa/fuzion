# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature wrapping_integer
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# wrapping_integer -- abstract ancestor of wrap-around integer numbers
#
# wrapping_integer is the abstract ancestor of integer numbers that have min and
# max values and operations with wrap-around semantics.
#
wrapping_integer : integer is

  # overflow checking

  # would negation -thiz cause an overflow?
  wrapped_on_neg bool is abstract

  # would addition thiz + other cause an overflow or underflow?
  overflow_on_add(other wrapping_integer.this.type) bool is abstract
  underflow_on_add(other wrapping_integer.this.type) bool is abstract
  wrapped_on_add(other wrapping_integer.this.type) => overflow_on_add(other) || underflow_on_add(other)

  # would subtraction thiz - other cause an overflow or underflow?
  overflow_on_sub(other wrapping_integer.this.type) bool is abstract
  underflow_on_sub(other wrapping_integer.this.type) bool is abstract
  wrapped_on_sub(other wrapping_integer.this.type) => overflow_on_sub(other) || underflow_on_sub(other)

  # would multiplication thiz * other cause an overflow or underflow?
  overflow_on_mul(other wrapping_integer.this.type) bool is abstract
  underflow_on_mul(other wrapping_integer.this.type) bool is abstract
  wrapped_on_mul(other wrapping_integer.this.type) => overflow_on_mul(other) || underflow_on_mul(other)

  # preconditions used in 'numeric' for basic operations: true if the
  # operation is permitted for the given values
  prefix -! => !wrapped_on_neg
  infix +! (other wrapping_integer.this.type) => !(overflow_on_add other) && !(underflow_on_add other)
  infix -! (other wrapping_integer.this.type) => !(overflow_on_sub other) && !(underflow_on_sub other)
  infix *! (other wrapping_integer.this.type) => !(overflow_on_mul other) && !(underflow_on_mul other)
  infix /! (other wrapping_integer.this.type) => true  # other != zero is checked in separate condition
  infix %! (other wrapping_integer.this.type) => true  # other != zero is checked in separate condition
  infix **!(other wrapping_integer.this.type) => !(overflow_on_exp other)

  # neg, add, sub, mul with wrap-around semantics
  prefix -° wrapping_integer.this.type is abstract
  infix +° (other wrapping_integer.this.type) wrapping_integer.this.type is abstract
  infix -° (other wrapping_integer.this.type) wrapping_integer.this.type is abstract
  infix *° (other wrapping_integer.this.type) wrapping_integer.this.type is abstract

  is_min => wrapping_integer.this = wrapping_integer.this.type.min
  is_max => wrapping_integer.this = wrapping_integer.this.type.max

  # check if this type of wrapping_integer is bounded
  #
  # wrapping_integers are assumed to be a bound set by default, so
  # this returns true unless redefined by an implementation
  redef is_bounded => true

  # basic operations with runtime error on overflow

  # negation, with check for overflow
  redef prefix - wrapping_integer.this.type
    pre
      debug: !wrapped_on_neg
  is -° thiz

  # addition, with check for overflow
  redef infix +  (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      debug: !overflow_on_add(other),
      debug: !underflow_on_add(other)
  is thiz +° other

  # subtraction, with check for overflow
  redef infix -  (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      debug: !overflow_on_sub(other),
      debug: !underflow_on_sub(other)
  is thiz -° other

  # multiplication, with check for overflow
  redef infix *  (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      debug: !overflow_on_mul(other),
      debug: !underflow_on_mul(other)
  is thiz *° other

  # overflow checking operations
  redef prefix -?          num_option wrapping_integer.this.type is if wrapped_on_neg        then nil else -thiz
  redef infix +? (other wrapping_integer.this.type) num_option wrapping_integer.this.type is if wrapped_on_add(other) then nil else thiz + other
  redef infix -? (other wrapping_integer.this.type) num_option wrapping_integer.this.type is if wrapped_on_sub(other) then nil else thiz - other
  redef infix *? (other wrapping_integer.this.type) num_option wrapping_integer.this.type is if wrapped_on_mul(other) then nil else thiz * other

  # NYI: These redefinitions are required to avoid errors in some tests when
  # removing the type parameter from numeric. Why?
  redef infix / (other wrapping_integer.this.type) wrapping_integer.this.type is abstract
  redef infix % (other wrapping_integer.this.type) wrapping_integer.this.type is abstract

  # saturating  operations
  redef prefix -^          => if wrapped_on_neg if thiz > wrapping_integer.this.type.zero then wrapping_integer.this.type.min.thiz else wrapping_integer.this.type.max.thiz else - thiz
  redef infix +^ (other wrapping_integer.this.type) => if overflow_on_add(other) then wrapping_integer.this.type.max.thiz else if underflow_on_add(other) then wrapping_integer.this.type.min.thiz else thiz + other
  redef infix -^ (other wrapping_integer.this.type) => if overflow_on_sub(other) then wrapping_integer.this.type.max.thiz else if underflow_on_sub(other) then wrapping_integer.this.type.min.thiz else thiz - other
  redef infix *^ (other wrapping_integer.this.type) => if overflow_on_mul(other) then wrapping_integer.this.type.max.thiz else if underflow_on_mul(other) then wrapping_integer.this.type.min.thiz else thiz * other


  # exponentiation for positive exponent
  #
  # 'zero ** zero' is permitted and results in 'one'.
  #
  infix ** (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      safety: other ≥ wrapping_integer.this.type.zero,
      debug: !overflow_on_exp(other)
  is
    thiz **° other


  # exponentiation with wrap-around semantics
  #
  # 'zero **° zero' is permitted and results in 'one'.
  #
  infix **° (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      safety: other ≥ wrapping_integer.this.type.zero
  is
    if      (other = wrapping_integer.this.type.zero) wrapping_integer.this.type.one
    else if (other = wrapping_integer.this.type.one ) thiz
    else
      tmp := (thiz *° thiz) **° (other / wrapping_integer.this.type.two)
      if other %% wrapping_integer.this.type.two
        tmp
      else
        tmp *° thiz


  # exponentiation with overflow checking semantics
  #
  # 'zero **? zero' is permitted and results in 'one'.
  #
  infix **? (other wrapping_integer.this.type) num_option wrapping_integer.this.type
    pre
      safety: other ≥ wrapping_integer.this.type.zero
  is
    if      (other = wrapping_integer.this.type.zero) wrapping_integer.this.type.one
    else if (other = wrapping_integer.this.type.one ) thiz
    else
      tmp := (thiz *? thiz) **? (other / wrapping_integer.this.type.two)
      if other %% wrapping_integer.this.type.two
        tmp
      else
        tmp *? thiz


  # would exponentiation 'this ** other' cause an overflow?
  #
  overflow_on_exp(other wrapping_integer.this.type) => (thiz **? other)!!


  # exponentiation with saturating semantics
  #
  # 'zero **^ zero' is permitted and results in 'one'.
  #
  infix **^ (other wrapping_integer.this.type) wrapping_integer.this.type
    pre
      safety: other ≥ wrapping_integer.this.type.zero
  is
    if overflow_on_exp other
      if (wrapping_integer.this ≥ wrapping_integer.this.type.zero) || (other %% wrapping_integer.this.type.two)
        wrapping_integer.this.type.max.thiz
      else
        wrapping_integer.this.type.min.thiz
    else
      thiz ** other

  # bitwise NOT
  redef prefix ~ wrapping_integer.this.type
    pre
      is_bounded
  is
    thiz ^ wrapping_integer.this.type.all_bits_set


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  ones_count i32 is abstract


  # this integer as an array of bytes (little endian)
  as_bytes array u8 is
    bs := wrapping_integer.this.type.byte_size
    array u8 bs (idx ->
      shift wrapping_integer.this.type := wrapping_integer.this.type.from_u32 (bs.as_u32-idx.as_u32-1)*8
      (wrapping_integer.this>>shift).low8bits)



  # returns the number in whose bit representation all bits are ones
  type.all_bits_set wrapping_integer.this.type is abstract


  # how many bytes does this integer use?
  type.byte_size i32 is
    # NYI #1179
    all_bits_set.ones_count / 8


  # minimum
  #
  type.min wrapping_integer.this.type is abstract


  # maximum
  #
  type.max wrapping_integer.this.type is abstract
