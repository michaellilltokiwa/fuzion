# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature List
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# List -- ancestor for features that can be converted to a 'list' or a
# 'stream'
#
List<T> ref is


  # create a list from this List.
  #
  # A list is immutable, so it can be reused and shared between threads.
  # Compared to a stream, a list may require more (heap) allocation.
  #
  # Default implementation uses asStream. Heirs must redefine at least
  # one of asList or asStream.
  #
  asList list<T> is asStream.asList


  # create a stream of T.
  #
  # A stream contains mutable state, so it cannot be reused or shared
  # between threads.
  #
  # Default implementation uses asList.  Heirs must redefine at least
  # one of asList or asStream.
  #
  asStream stream<T> is asList.asStream


  # is this list empty?
  #
  isEmpty => asList.isEmpty


  # count the number of elements in this List.  Note that this typically
  # runs forever if executed on an endless list
  #
  count => (mapList<i32> (_ -> 1)).fold i32.sum


  # get the head of this list, panic if list is empty
  #
  first
    pre
      debug: !isEmpty
    => asList.forceHead


  # get the last element of this list, panic if list is empty
  #
  # This may take time in O(count), in particular, it may not terminate
  # for an infinite list.
  #
  last
    pre
      debug: !isEmpty
   => asList.last


  # collect the contents of this List into an array
  #
  asArray array<T> is
    s := asStream
    array<T> count i->s.next


  # create a stream and call 'forAll f' on it
  #
  forAll(f T -> unit) unit is asStream.forAll f


  # create a stream and have it consumed by f, infix operator synonyme of forAll.
  #
  infix | (f T -> unit) => forAll f


  # create a stream, infix operator synonyme for asStream
  #
  postfix | => asStream


  # create a new stream and apply 'f' to each element 'e' as long as 'f e'
  #
  forWhile(f T -> bool) unit is asStream.forWhile f


  # create a new stream that contains the first elements of this stream for
  # which 'f e' is false
  #
  before(f T -> bool) stream<T> is asStream.before f


  # create a new stream and filter its elements using predicate f
  #
  filter   (f T -> bool) stream<T> is asStream.filter f


  # create a new stream and filter its elements using predicate f, infix operator
  # synonyme of filter.
  #
  infix |& (f T -> bool) => filter f


  # create a new stream and filter its elements using predicate f, infix operator
  # synonyme of filter.
  #
  # NYI: What is better, 'infix |&' or 'infix &', or something else?
  #
  infix & (f T -> bool) => filter f


  # create a stream and check if predicate f holds for all elements produced
  #
  infix ∀ (f T -> bool) bool is asStream ∀ f


  # create a stream and check if predicate f holds for at least one element produced
  #
  infix ∃ (f T -> bool) bool is asStream ∃ f


  # create a list that consists only of the first n elements of this
  # List, fewer if this stream has fewer elements
  #
  take (n i32) => asList.take n


  # create a list that consists of the elements of this List except the first
  # n elements
  #
  drop (n i32) => asList.drop n


  # create a slice from this List that consists of the elements starting at index
  # from (including) up to index to (excluding).
  #
  slice(from, to i32) => drop(from).take to-from
    # NYI: OPTIMIZATION: We could redefine this, e.g. to avoid copying array data
    # on array.slice(from,to).asArray.


  # Lazily take the first elements of a list for which predicate 'p' holds.
  #
  takeWhile (p fun(T) bool) => asList.takeWhile p


  # Lazily drop the first elements of a list for which predicate 'p' holds.
  #
  dropWhile (p fun(T) bool) => asList.dropWhile p


  # create a List that consists of all the elements of this List followed
  # by all the elements of s
  #
  concatLists (s List<T>) List<T> is asList.concat s.asList


  # infix operand synonyme for concatLists
  #
  infix ++ (s List<T>) => asList ++ s.asList


  # create a list that repeats the current List indefinitely.  In case 'List.this'
  # is empty, returns 'nil'
  #
  cycle list<T> is asList.cycle


  # create a lazy list of all the tails of this list, including the complete list
  # 'list.this' and the empty list 'nil'.
  #
  tails list<list<T>> is asList.tails


  # create a string representation of this list including all the string
  # representations of its contents, separated by ',' and enclosed in '['
  # and ']'.
  #
  redef asString => asList.asString


  # create a string representation of this list including all the string
  # representations of its contents, separated by 'sep'.
  #
  asString (sep string) => asList.asString sep


  # map the List to a new List applying function f to all elements
  #
  # This performs a lazy mapping, f is called only when the elements
  # in the list are accessed.
  #
  # NYI: As long as covariance for result type is not permitted we cannot
  # call this 'map' since this would clash with, e.g., 'array.map'
  #
  mapList<B>(f fun(T) B) => asList.map f


  # fold the elements of this List using the given monoid.
  #
  # e.g., to sum the elements of a stream of i32, use s.fold i32.sum
  #
  fold (m Monoid<T>) => asList.fold m.e, m
